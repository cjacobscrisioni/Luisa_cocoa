Container Geometries
{
	unit<dpoint> AfricanACEA: Format = "EPSG:102022", Descr = "African Albers Conic Equal Area";
	unit<dpoint> WGS84      : Format = "EPSG:4326";
	unit<dpoint> BaseProjection := AfricanACEA;
	unit<dpoint> Mollweide  : Format = "ESRI:54009";
	
	// first, let's define an arbitrary regular tiling
	unit<dpoint> proto_base_grid_10m := gridset(BaseProjection, GetProjectionFactor(Base_grid_100m) * point(0.1d, 0.1d, BaseProjection), GetProjectionOffSet(Base_grid_100m), BaseProjection);
	unit<dpoint> proto_base_grid_1k  := gridset(BaseProjection, GetProjectionFactor(Base_grid_100m) * point(10d, 10d, BaseProjection), GetProjectionOffSet(Base_grid_100m), BaseProjection);
	unit<dpoint> proto_base_grid_5k  := gridset(BaseProjection, GetProjectionFactor(Base_grid_100m) * point(50d, 50d, BaseProjection), GetProjectionOffSet(Base_grid_100m), BaseProjection);
	unit<dpoint> proto_base_grid_10k := gridset(BaseProjection, GetProjectionFactor(Base_grid_100m) * point(100d, 100d, BaseProjection), GetProjectionOffSet(Base_grid_100m), BaseProjection);
	unit<ipoint> Base_grid_100m := BaseData/Landuse, DialogData = "BaseProjection"; // this domain has cardinality 82178 x 89023 = 7.315.732.094 = 6.8 GB.
	
	unit<ipoint> Base_grid_10m  := range(proto_base_grid_10m, point(0i,0i,ipoint), upperbound(Base_grid_100m) / point(10i,10i,ipoint) ), DialogData = "BaseProjection"
	{
		attribute<int32> rownr  := pointRow(id(.));
		attribute<bool>  uneven := mod(rownr, 2i) > 0i;
	}
	
	unit<ipoint> Base_grid_1km  := range(proto_base_grid_1k, point(0i,0i,ipoint), upperbound(Base_grid_100m) / point(10i,10i,ipoint) ), DialogData = "BaseProjection"
	{
		attribute<int32> rownr  := pointRow(id(.));
		attribute<bool>  uneven := mod(rownr, 2i) > 0i;
	}
	
	unit<ipoint> Base_grid_5km  := range(proto_base_grid_5k, point(0i,0i,ipoint), upperbound(Base_grid_100m) / point(50i,50i,ipoint) ), DialogData = "BaseProjection"
	{
		attribute<int32> rownr  := pointRow(id(.));
		attribute<bool>  uneven := mod(rownr, 2i) > 0i;
	}
	
	unit<ipoint> Base_grid_10km  := range(proto_base_grid_10k, point(0i,0i,ipoint), upperbound(Base_grid_100m) / point(100i,100i,ipoint) ), DialogData = "BaseProjection"
	{
		attribute<int32> rownr  := pointRow(id(.));
		attribute<bool>  uneven := mod(rownr, 2i) > 0i;
	}
	
	parameter<Base_grid_100m> TileSize   := Point(4096i, 4096i, Base_grid_100m);
	parameter<Base_grid_100m> TileOffset := Point(   0i,    0i, Base_grid_100m);
	
	unit<ipoint> RegularTiledRaster := TiledUnit(TileSize); // this defines a regular tiling of 21x22 
	
	unit<spoint>  Tile := gridset(Base_grid_100m, TileSize, TileOffset, spoint), FreeData = "False"
	{
		attribute<Base_grid_100m> LB           := min(BaseData/Landuse/RT_StudyAreaSelection/nr_OrgEntity, BaseData/Landuse/RT_StudyAreaSelection/nr_OrgEntity[.]);
		attribute<Base_grid_100m> UB           := max(BaseData/Landuse/RT_StudyAreaSelection/nr_OrgEntity, BaseData/Landuse/RT_StudyAreaSelection/nr_OrgEntity[.])+point(1i, 1i);
		attribute<bool>           HasStudyArea := any(BaseData/Landuse/RT_IsStudyArea, mapping(RegularTiledRaster, .));
	}
	unit<uint32> StudyAreaTile_Select := subset(Tile/HasStudyArea) // this selects 219 of the (21 x 22) (409.6 km)^2 tiles, which is 47%
	{
		// as some regular tiles are cut on local boundedness of the study area, only 2,879,156,535 / 7,315,732,094 = 39.36% of the original extent is selected.
		attribute<Base_grid_100m> LB := Tile/LB[nr_OrgEntity];
		attribute<Base_grid_100m> UB := Tile/UB[nr_OrgEntity];
	}
	unit<uint32> StudyAreaTile_Create := StudyAreaTile_Select, StorageName = "%projdir%/data/StudyAreaTiles_new.dbf" // decouple by renaming this file when produced
	{
		attribute<int32>         LB_X := pointcol(LB);
		attribute<int32>         LB_y := pointrow(LB);
		attribute<int32>         UB_X := pointcol(UB);
		attribute<int32>         UB_y := pointrow(UB);
	} 
	// from here on, we only use the decoupled study area tiles and no longer have to process the full extent of the study area.
	unit<uint32> StudyAreaTile: StorageName = "%projdir%/data/StudyAreaTiles.dbf", StorageReadOnly = "true", FreeData = "False"
	{
		attribute<int32>            LB_X;
		attribute<int32>            LB_y;
		attribute<Base_grid_100m>   LB    := point(LB_y, LB_x, Base_grid_100m);
		attribute<Base_grid_10m>    LB10m := LB[Base_grid_10m];
		attribute<Base_grid_1km>    LB1k  := LB[Base_grid_1km];
		attribute<Base_grid_5km>    LB5k  := LB[Base_grid_5km];
		attribute<Base_grid_10km>   LB10k := LB[Base_grid_10km];
		attribute<int32>            UB_X;
		attribute<int32>            UB_y;
		attribute<Base_grid_100m>   UB    := point(UB_y, UB_x, Base_grid_100m);
		attribute<Base_grid_10m>    UB10m := UB[Base_grid_10m];
		attribute<Base_grid_1km>    UB1k  := UB[Base_grid_1km];
		attribute<Base_grid_5km>    UB5k  := UB[Base_grid_5km];
		attribute<Base_grid_10km>   UB10k := UB[Base_grid_10km];
	} 		
	
	unit<ipoint> SelectedTiledRaster    := TiledUnit(StudyAreaTile/LB, StudyAreaTile/UB), DialogData = "BaseProjection" // only selected full tiles in domain.
	{
		attribute<SelectedTiledRaster1k>  SelectedTiledRaster1k_rel := mapping(., SelectedTiledRaster1k);
	}
	
	unit<ipoint> SelectedTiledRaster_10m := TiledUnit(StudyAreaTile/LB10m, StudyAreaTile/UB10m), DialogData = "BaseProjection" // only selected full tiles in domain.
	{
		attribute<SelectedTiledRaster>  SelectedTiledRaster_rel := mapping(., SelectedTiledRaster);
	}
	unit<ipoint> SelectedTiledRaster1k  := TiledUnit(StudyAreaTile/LB1k, StudyAreaTile/UB1k), DialogData = "BaseProjection" 
	{ // only selected full tiles in domain.
		attribute<ipoint> id := id(.);
		attribute<int32>                   pcol5k   := pointcol(id(.)) / int32(5);
		attribute<int32>                   prow5k   := pointrow(id(.)) / int32(5);
		attribute<int32>                   pcol10k  := pointcol(id(.)) / int32(10);
		attribute<int32>                   prow10k  := pointrow(id(.)) / int32(10);
		attribute<SelectedTiledRaster5k>   m5k_rel  := point(prow5k, pcol5k, SelectedTiledRaster5k); 
		attribute<SelectedTiledRaster10k>  m10k_rel := point(prow10k, pcol10k, SelectedTiledRaster10k); 
		
	}
	unit<uint64> SelectedTiledRaster1k_uint32 := subset(const(TRUE,SelectedTiledRaster1k))
	{
		attribute<BaseProjection> geometry := nr_OrgEntity[BaseProjection]; 
	}
	
	
	
	unit<ipoint> SelectedTiledRaster5k  := TiledUnit(StudyAreaTile/LB5k, StudyAreaTile/UB5k), DialogData = "BaseProjection"; // only selected full tiles in domain.
	unit<ipoint> SelectedTiledRaster10k := TiledUnit(StudyAreaTile/LB10k, StudyAreaTile/UB10k), DialogData = "BaseProjection"; // only selected full tiles in domain.
	
	// now let's look at the country level.
	unit<uint32> CountryJoinList: nrofrows = 8 
	{
		attribute<string> ISO:  [ 'MUS', 'COM', 'MDG', 'CPV', 'GMB'   ,'SEN'   , 'SDN'   , 'SSD'];
		attribute<string> code: [ 'SC1', 'SC1', 'SC1', ''   , 'SENGMB','SENGMB', 'SDNSSD', 'SDNSSD']; // you can also join a small country to an existing neighboring country's ISO code
	}
	unit<uint32> Country := BaseData/Country 
	{
		attribute<string>         code                                         := MakeDefined(rjoin(ISO, CountryJoinList/ISO, CountryJoinList/code), ISO);
		attribute<CountryGroup>   CountryGroupId                               := rlookup(code, CountryGroup/Values);
		attribute<string>         ZoneId                                       := ISO;
		attribute<.>              per_SelectedTiledRaster(SelectedTiledRaster) := poly2grid(Geometry, SelectedTiledRaster);
		attribute<BaseProjection> BP_LB                                        := lower_bound(geometry);
		attribute<BaseProjection> BP_UB                                        := upper_bound(geometry);
	}
	
	unit<uint32> CountryGroup := unique(Country/code)
	{
		attribute<string> code 	:= values;
		attribute<string> name 	:= values;
		attribute<bool>	  select:= =RunSettings/RunSingleCountry ? 'name == RunSettings/RunSingleCountry_name' : 'strlen(code) > 0';
		
		unit<uint32> select_unit := subset(select)
		{
			attribute<BaseProjection> geometry                   (poly) := rjoin(code, country/code, Country/geometry)[nr_OrgEntity];
			attribute<.>              per_RegularTiledRaster (RegularTiledRaster) := poly2grid(geometry, RegularTiledRaster);
			attribute<.>              per_Base_grid_1km (Base_grid_1km) := poly2grid(geometry, Base_grid_1km);
			attribute<bool>           IsDefined_grid    (Base_grid_1km) := IsDefined(per_Base_grid_1km);
		}
		
		attribute<.> per_Country (Country) := rlookup(Country/code, code);
		attribute<.> per_SelectedTiledRaster(SelectedTiledRaster) := per_Country[Country/per_SelectedTiledRaster];
		
		attribute<uint32> country_count := pcount(per_Country);
		attribute<bool>   is_composite  := country_count != 1 || (code != country/ISO[invert(per_country)]);
		attribute<string> country_list  := AsItemList(Country/ISO, per_country);
		attribute<string> label:= values + iif(is_composite, '={' + country_list + '}', '');
		
		attribute<BaseProjection> BP_LB := min(Country/BP_LB, per_Country);
		attribute<BaseProjection> BP_UB := max(Country/BP_UB, per_Country);
		attribute<SelectedTiledRaster> ST_LB := BP_LB[SelectedTiledRaster];
		attribute<SelectedTiledRaster> ST_UB := BP_UB[SelectedTiledRaster] + Point(1i, 1i);
		attribute<SelectedTiledRaster1k> ST_LB1k := BP_LB[SelectedTiledRaster1k];
		attribute<SelectedTiledRaster1k> ST_UB1k := BP_UB[SelectedTiledRaster1k] + Point(1i, 1i);
	}
	container CountryGroupDomains := 
		for_each_nex(
			CountryGroup/name
			, replace('range(SelectedTiledRaster, CountryGroup/ST_LB[@], CountryGroup/ST_UB[@])', '@', string(id(CountryGroup))+'[CountryGroup]')
			, ipoint
		);
	container CountryGroupDomains1k := 
		for_each_net(
			CountryGroup/name
			, replace('range(SelectedTiledRaster1k, CountryGroup/ST_LB1k[@], CountryGroup/ST_UB1k[@])', '@', string(id(CountryGroup))+'[CountryGroup]')
			, ipoint
		);
}		